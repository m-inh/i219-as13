JavaPathfinder core system v8.0 (rev 31) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
FBBProb1.main()

====================================================== search started: 1/30/20 3:32 PM

====================================================== error 1
gov.nasa.jpf.vm.NotDeadlockedProperty
deadlock encountered:
  thread java.lang.Thread:{id:0,name:main,status:WAITING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  thread FSender1:{id:1,name:Thread-1,status:TERMINATED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  thread FReceiver1:{id:2,name:Thread-2,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"ROOT" ,1/1,isCascaded:false}
      [3157 insn w/o sources]
  FBBProb1.java:10               : public class FBBProb1 {
      [2 insn w/o sources]
  FBBProb1.java:10               : public class FBBProb1 {
  FBBProb1.java:1                : import java.util.ArrayList;
      [1 insn w/o sources]
  FBBProb1.java:12               : List<Integer> log = new ArrayList<Integer>();
      [9 insn w/o sources]
  FBBProb1.java:12               : List<Integer> log = new ArrayList<Integer>();
      [16 insn w/o sources]
  FBBProb1.java:12               : List<Integer> log = new ArrayList<Integer>();
  FBBProb1.java:13               : FMonitorBBuf1<Integer> buf = new FMonitorBBuf1<Integer>(2, log);
  FMonitorBBuf1.java:15          : public FMonitorBBuf1(int cap, List<E> log) {
      [1 insn w/o sources]
  FMonitorBBuf1.java:12          : private int noe = 0;
  FMonitorBBuf1.java:16          : this.queue = new EmpQueue<E>();
  EmpQueue.java:7                : public class EmpQueue<E> implements Queue<E> {
      [1 insn w/o sources]
  EmpQueue.java:7                : public class EmpQueue<E> implements Queue<E> {
  FMonitorBBuf1.java:16          : this.queue = new EmpQueue<E>();
  FMonitorBBuf1.java:17          : this.capacity = cap;
  FMonitorBBuf1.java:18          : this.log = log;
  FMonitorBBuf1.java:19          : }
  FBBProb1.java:13               : FMonitorBBuf1<Integer> buf = new FMonitorBBuf1<Integer>(2, log);
  FBBProb1.java:14               : List<Integer> msgsSent = new ArrayList<Integer>();
      [16 insn w/o sources]
  FBBProb1.java:14               : List<Integer> msgsSent = new ArrayList<Integer>();
  FBBProb1.java:16               : for (int i = 0; i < 2; i++) msgsSent.add(i);
      [2 insn w/o sources]
  FBBProb1.java:16               : for (int i = 0; i < 2; i++) msgsSent.add(i);
      [121 insn w/o sources]
  FBBProb1.java:16               : for (int i = 0; i < 2; i++) msgsSent.add(i);
      [2 insn w/o sources]
  FBBProb1.java:16               : for (int i = 0; i < 2; i++) msgsSent.add(i);
      [44 insn w/o sources]
  FBBProb1.java:16               : for (int i = 0; i < 2; i++) msgsSent.add(i);
  FBBProb1.java:18               : List<Integer> msgsReceived = new ArrayList<Integer>();
      [16 insn w/o sources]
  FBBProb1.java:18               : List<Integer> msgsReceived = new ArrayList<Integer>();
  FBBProb1.java:19               : int nom = msgsSent.size() + msgsSent.size();
      [3 insn w/o sources]
  FBBProb1.java:19               : int nom = msgsSent.size() + msgsSent.size();
      [3 insn w/o sources]
  FBBProb1.java:19               : int nom = msgsSent.size() + msgsSent.size();
  FBBProb1.java:21               : FSender1<Integer> FSender1 = new FSender1<Integer>(buf, msgsSent);
  FSender1.java:13               : public FSender1(FMonitorBBuf1<E> buf, List<E> msgs) {
      [145 insn w/o sources]
  FSender1.java:14               : this.buf = buf;
  FSender1.java:15               : this.msgs = msgs;
  FSender1.java:16               : }
  FBBProb1.java:21               : FSender1<Integer> FSender1 = new FSender1<Integer>(buf, msgsSent);
  FBBProb1.java:22               : FReceiver1<Integer> FReceiver1 = new FReceiver1<Integer>(buf, msgsReceived, nom);
  FReceiver1.java:14             : public FReceiver1(FMonitorBBuf1<E> buf, List<E> msgs, int nom) {
      [145 insn w/o sources]
  FReceiver1.java:15             : this.buf = buf;
  FReceiver1.java:16             : this.msgs = msgs;
  FReceiver1.java:17             : this.nom = nom;
  FReceiver1.java:18             : }
  FBBProb1.java:22               : FReceiver1<Integer> FReceiver1 = new FReceiver1<Integer>(buf, msgsReceived, nom);
  FBBProb1.java:24               : FSender1.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #1 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  FBBProb1.java:25               : FReceiver1.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/3,isCascaded:false}
      [2 insn w/o sources]
  FBBProb1.java:26               : FSender1.join();
      [1 insn w/o sources]
------------------------------------------------------ transition #3 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"JOIN" ,1/2,isCascaded:false}
      [1 insn w/o sources]
  FSender1.java:1                : import java.util.List;
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
------------------------------------------------------ transition #4 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
      [2 insn w/o sources]
------------------------------------------------------ transition #5 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
  FSender1.java:21               : buf.put(msgs.get(i));
------------------------------------------------------ transition #6 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FSender1.java:21               : buf.put(msgs.get(i));
------------------------------------------------------ transition #7 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FSender1.java:21               : buf.put(msgs.get(i));
      [6 insn w/o sources]
------------------------------------------------------ transition #8 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #9 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #10 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  FSender1.java:21               : buf.put(msgs.get(i));
------------------------------------------------------ transition #11 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  FSender1.java:21               : buf.put(msgs.get(i));
  FMonitorBBuf1.java:22          : while (noe >= capacity) {
------------------------------------------------------ transition #12 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:22          : while (noe >= capacity) {
  FMonitorBBuf1.java:25          : if (noe < capacity) {
------------------------------------------------------ transition #13 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:25          : if (noe < capacity) {
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
------------------------------------------------------ transition #14 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
  EmpQueue.java:9                : return new NeQueue<E>(e, this);
  NeQueue.java:11                : public NeQueue(E e, Queue<E> q) {
      [1 insn w/o sources]
  NeQueue.java:12                : this.head = e;
  NeQueue.java:13                : this.tail = q;
  NeQueue.java:14                : }
  EmpQueue.java:9                : return new NeQueue<E>(e, this);
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
------------------------------------------------------ transition #15 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
------------------------------------------------------ transition #16 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
  FMonitorBBuf1.java:27          : log.add(e);
------------------------------------------------------ transition #17 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:27          : log.add(e);
      [3 insn w/o sources]
------------------------------------------------------ transition #18 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #19 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #20 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
      [12 insn w/o sources]
------------------------------------------------------ transition #21 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #22 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #23 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [9 insn w/o sources]
------------------------------------------------------ transition #24 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [22 insn w/o sources]
------------------------------------------------------ transition #25 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [36 insn w/o sources]
------------------------------------------------------ transition #26 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [1 insn w/o sources]
------------------------------------------------------ transition #27 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/2,isCascaded:false}
      [6 insn w/o sources]
------------------------------------------------------ transition #28 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #29 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #30 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [5 insn w/o sources]
  FMonitorBBuf1.java:27          : log.add(e);
  FMonitorBBuf1.java:28          : noe++;
------------------------------------------------------ transition #31 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:28          : noe++;
------------------------------------------------------ transition #32 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:28          : noe++;
  FMonitorBBuf1.java:30          : this.notifyAll();
      [2 insn w/o sources]
  FMonitorBBuf1.java:31          : }
  FSender1.java:24               : }
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
------------------------------------------------------ transition #33 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
      [2 insn w/o sources]
------------------------------------------------------ transition #34 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
  FSender1.java:21               : buf.put(msgs.get(i));
------------------------------------------------------ transition #35 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FSender1.java:21               : buf.put(msgs.get(i));
------------------------------------------------------ transition #36 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FSender1.java:21               : buf.put(msgs.get(i));
      [6 insn w/o sources]
------------------------------------------------------ transition #37 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #38 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #39 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  FSender1.java:21               : buf.put(msgs.get(i));
------------------------------------------------------ transition #40 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  FSender1.java:21               : buf.put(msgs.get(i));
  FMonitorBBuf1.java:22          : while (noe >= capacity) {
------------------------------------------------------ transition #41 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:22          : while (noe >= capacity) {
  FMonitorBBuf1.java:25          : if (noe < capacity) {
------------------------------------------------------ transition #42 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:25          : if (noe < capacity) {
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
------------------------------------------------------ transition #43 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
  NeQueue.java:7                 : public class NeQueue<E> implements Queue<E> {
  NeQueue.java:17                : return new NeQueue<E>(head, tail.enq(e));
  EmpQueue.java:9                : return new NeQueue<E>(e, this);
  NeQueue.java:11                : public NeQueue(E e, Queue<E> q) {
      [1 insn w/o sources]
  NeQueue.java:12                : this.head = e;
  NeQueue.java:13                : this.tail = q;
  NeQueue.java:14                : }
  EmpQueue.java:9                : return new NeQueue<E>(e, this);
  NeQueue.java:17                : return new NeQueue<E>(head, tail.enq(e));
  NeQueue.java:11                : public NeQueue(E e, Queue<E> q) {
      [1 insn w/o sources]
  NeQueue.java:12                : this.head = e;
  NeQueue.java:13                : this.tail = q;
  NeQueue.java:14                : }
  NeQueue.java:17                : return new NeQueue<E>(head, tail.enq(e));
  NeQueue.java:7                 : public class NeQueue<E> implements Queue<E> {
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
------------------------------------------------------ transition #44 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
------------------------------------------------------ transition #45 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:26          : queue = queue.enq(e);
  FMonitorBBuf1.java:27          : log.add(e);
------------------------------------------------------ transition #46 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:27          : log.add(e);
      [3 insn w/o sources]
------------------------------------------------------ transition #47 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #48 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #49 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #50 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #51 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #52 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [8 insn w/o sources]
------------------------------------------------------ transition #53 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [4 insn w/o sources]
------------------------------------------------------ transition #54 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [5 insn w/o sources]
------------------------------------------------------ transition #55 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [5 insn w/o sources]
  FMonitorBBuf1.java:27          : log.add(e);
  FMonitorBBuf1.java:28          : noe++;
------------------------------------------------------ transition #56 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:28          : noe++;
------------------------------------------------------ transition #57 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FMonitorBBuf1.java:28          : noe++;
  FMonitorBBuf1.java:30          : this.notifyAll();
      [2 insn w/o sources]
  FMonitorBBuf1.java:31          : }
  FSender1.java:24               : }
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
------------------------------------------------------ transition #58 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
      [2 insn w/o sources]
------------------------------------------------------ transition #59 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  FSender1.java:19               : for (int i = 0; i < msgs.size(); i++){
  FSender1.java:26               : }
  FSender1.java:4                : Name: NGUYEN, Minh Tien
------------------------------------------------------ transition #60 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"TERMINATE" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  FBBProb1.java:27               : FReceiver1.join();
      [1 insn w/o sources]
------------------------------------------------------ transition #61 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"JOIN" ,1/1,isCascaded:false}
      [1 insn w/o sources]
  FReceiver1.java:1              : import java.util.List;
  FReceiver1.java:21             : for (int i = 0; i < nom; i++) {
  FReceiver1.java:23             : msgs.add(buf.get());
  FMonitorBBuf1.java:34          : while (noe <= 0) {
  FMonitorBBuf1.java:37          : if (noe > 0) {
  FMonitorBBuf1.java:38          : E e = queue.top();
  NeQueue.java:25                : return head;
  FMonitorBBuf1.java:38          : E e = queue.top();
  FMonitorBBuf1.java:39          : queue = queue.deq();
  NeQueue.java:21                : return tail;
  FMonitorBBuf1.java:39          : queue = queue.deq();
  FMonitorBBuf1.java:40          : noe--;
  FMonitorBBuf1.java:41          : this.notifyAll();
      [2 insn w/o sources]
  FMonitorBBuf1.java:42          : return e;
  FReceiver1.java:23             : msgs.add(buf.get());
      [110 insn w/o sources]
  FReceiver1.java:23             : msgs.add(buf.get());
  FReceiver1.java:26             : }
  FReceiver1.java:21             : for (int i = 0; i < nom; i++) {
  FReceiver1.java:23             : msgs.add(buf.get());
  FMonitorBBuf1.java:34          : while (noe <= 0) {
  FMonitorBBuf1.java:37          : if (noe > 0) {
  FMonitorBBuf1.java:38          : E e = queue.top();
  NeQueue.java:25                : return head;
  FMonitorBBuf1.java:38          : E e = queue.top();
  FMonitorBBuf1.java:39          : queue = queue.deq();
  NeQueue.java:21                : return tail;
  FMonitorBBuf1.java:39          : queue = queue.deq();
  FMonitorBBuf1.java:40          : noe--;
  FMonitorBBuf1.java:41          : this.notifyAll();
      [2 insn w/o sources]
  FMonitorBBuf1.java:42          : return e;
  FReceiver1.java:23             : msgs.add(buf.get());
      [44 insn w/o sources]
  FReceiver1.java:23             : msgs.add(buf.get());
  FReceiver1.java:26             : }
  FReceiver1.java:21             : for (int i = 0; i < nom; i++) {
  FReceiver1.java:23             : msgs.add(buf.get());
  FMonitorBBuf1.java:34          : while (noe <= 0) {
  FMonitorBBuf1.java:35          : this.wait();
      [1 insn w/o sources]

====================================================== snapshot #1
thread java.lang.Thread:{id:0,name:main,status:WAITING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  waiting on: FReceiver1@2a0
  call stack:
        at java.lang.Thread.join(Thread.java)
        at FBBProb1.main(FBBProb1.java:27)

thread FReceiver1:{id:2,name:Thread-2,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  waiting on: FMonitorBBuf1@179
  call stack:
        at java.lang.Object.wait(Object.java)
        at FMonitorBBuf1.get(FMonitorBBuf1.java:35)
        at FReceiver1.run(FReceiver1.java:23)


====================================================== results
error #1: gov.nasa.jpf.vm.NotDeadlockedProperty "deadlock encountered:   thread java.lang.Thread:{i..."

====================================================== statistics
elapsed time:       00:00:00
states:             new=62,visited=0,backtracked=0,end=1
search:             maxDepth=62,constraints=0
choice generators:  thread=62 (signal=0,lock=3,sharedRef=52,threadApi=4,reschedule=3), data=0
heap:               new=686,released=11,maxLive=677,gcCycles=56
instructions:       4494
max memory:         245MB
loaded code:        classes=76,methods=1809

====================================================== search finished: 1/30/20 3:32 PM